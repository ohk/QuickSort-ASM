myss SEGMENT PARA STACK 'MYSS'
	DW 180 DUP(?)
myss ENDS

myds SEGMENT PARA 'MYDS'
DIZI 	DB	100 DUP(?)
n		DW	?
CR		EQU	13
LF		EQU	10
MSG_EL_NUM	DB	"Enter the count of Element Number in the Array:", 0
MSG_EL_IN	DB	CR, LF, "Enter the Elements:  ", 0
MSG_ERR	DB	CR, LF, "!!WRONG ELEMENT; ONLY NUMBER BETWEEN -128,127", 0
MSG_ARR_OUT	DB	CR, "Sorted Array:  ", 0
MSG_COMMA	DB	", ", 0
MSG_SUB	DB	"-", 0
MSG_FINISH	DB	CR, LF, "!!!PROGRESS FINISH", 0

myds ENDS


mycs SEGMENT PARA 'MYCS'
	ASSUME CS:mycs, DS:myds, SS:myss
GETC	PROC NEAR
  		MOV AH, 1h
  		INT 21H
  		RET
GETC	ENDP
  ;FONKSİYON PUTC
PUTC	PROC NEAR
  		PUSH AX
  		PUSH DX
  		MOV DL, AL
  		MOV AH, 2
  		INT 21H
  		POP DX
  		POP AX
  		RET
PUTC	ENDP
  ;FONKSİYON GETN
GETN	PROC NEAR
  		PUSH BX
  		PUSH CX
  		PUSH DX
  GETN_START:
  		MOV DX, 1
  		XOR BX, BX
  		XOR CX, CX
  NEW:	CALL GETC
  		CMP AL, CR
  		JE FIN_READ
  		CMP AL, "-"
  		JNE	CTRL_NUM
  NEGATIVE:
  		MOV DX, -1
  		JMP NEW
  CTRL_NUM:
  		CMP AL, "0"
  		JB ERR
  		CMP	AL, "9"
  		JA ERR
  		SUB AL, "0"
  		MOV BL, AL
  		MOV AX, 10
  		PUSH DX
  		MUL CX
  		POP DX
  		MOV CX, AX
  		ADD CX, BX
  		JMP NEW
  ERR:	MOV AX, OFFSET MSG_ERR
  		CALL P_STR
  		JMP GETN_START
  FIN_READ:
  		MOV AX, CX
  		CMP DX, 1
  		JE FIN_GETN
  		NEG AX
  FIN_GETN:
  		POP DX
  		POP CX
  		POP DX
  		RET
GETN	ENDP
  ;FONKSİYON PUTN
PUTN	PROC NEAR
  		PUSH CX
  		PUSH DX
  		XOR DX, DX
  		PUSH DX

  		MOV CX, 10
  		CMP AX, 0
  		JGE CALC_DIGITS
  		NEG AX
  		PUSH AX
  		MOV AL, "-"
  		CALL PUTC
  		POP AX
  CALC_DIGITS:
  		DIV CX
  		ADD DX, "0"
  		PUSH DX
  		XOR DX, DX
  		CMP AX, 0
  		JNE CALC_DIGITS
  DISP_LOOP:
  		POP AX
  		CMP AX, 0
  		JE END_DISP_LOOP
  		CALL PUTC
  		JMP	DISP_LOOP
  END_DISP_LOOP:
  		POP DX
  		POP CX
  		RET
PUTN	ENDP
  ;FONKSİYON P_STR
P_STR	PROC NEAR
  		PUSH BX
  		MOV BX, AX
  		MOV AL, BYTE PTR[BX]
  PUT_LOOP:
  		CMP AL, 0
  		JE PUT_FIN
  		CALL PUTC
  		INC BX
  		MOV AL, BYTE PTR[BX]
  		JMP PUT_LOOP
  PUT_FIN:
  		POP BX
  		RET
P_STR	ENDP

Q_SORT_PR PROC FAR
			; AX START, BX END
			PUSH AX
			PUSH BX
			;LEA SI,DIZI
			MOV SI,AX ; J
			MOV DI,BX ; LAST ELEMENT

			XCHG AX,BX
			SUB AX,BX
			MOV CX,1
			XOR DX,DX
			DIV CX
			MOV CX,AX ; # OF LOOPS

			MOV BX,SI ; I

	LS:	MOV Al,[DI]
			CMP Al,[SI]
			JNG LELSE
			MOV Al,[SI]
      XCHG Al,[BX]
			MOV [SI],Al
			ADD BX,1
	LELSE:
			ADD SI,1
			LOOP LS
			MOV Al,[DI]
			XCHG Al,[BX] ;BX is the pivot
			MOV [DI],Al
			MOV DX,BX ; RETURN DX
			POP BX
			POP AX
			RETF
Q_SORT_PR ENDP

Q_SORT_MAIN PROC FAR
			; AX START, BX END
			PUSH DX
			PUSH AX
			PUSH BX

			PUSH BX
			SUB BX,AX
			CMP BX,1
			POP BX

			JL LEND
			CALL Q_SORT_PR
				;FIRST CALL
			PUSH BX
			MOV BX,DX
			SUB BX,1
			CALL Q_SORT_MAIN
				;SECOND CALL
			POP BX
			MOV AX,DX
			ADD AX,1
			CALL Q_SORT_MAIN
	LEND:
			POP BX
			POP AX
			POP DX
		  RETF
Q_SORT_MAIN ENDP

MAIN PROC FAR
	PUSH DS
	XOR AX,AX
	PUSH AX
	MOV AX,myds
	MOV DS,AX

    XOR DX, DX
    XOR CX, CX
    XOR DI, DI
    XOR SI, SI
    MOV AX, OFFSET MSG_EL_NUM
    CALL P_STR
    CALL GETN
    MOV WORD PTR n, AX
    MOV CX, n	;n değerini atıyoruz.
    MOV AX, OFFSET MSG_EL_IN
    CALL P_STR
LOOP_GET_ELE:	CALL GETN			;Dizinin elemanları alınıyor.
	MOV DIZI[SI], AL
    INC SI
    LOOP LOOP_GET_ELE
	;CODE STARTS
	LEA AX,DIZI
	MOV BX,n
	DEC BX
	CALL Q_SORT_MAIN
	;SORT BİTTİ
	MOV AX, OFFSET MSG_ARR_OUT
    CALL P_STR
	MOV CX, n
	XOR SI, SI
LOOP_PRINT_ELE:	XOR AX, AX
	MOV AL, dizi[SI]
	CMP AL, 128
	JB	POZ
	MOV AX, OFFSET MSG_SUB
    CALL P_STR
	MOV AL, dizi[SI]
	XOR AL,	255
	INC AL
POZ:CALL PUTN
	MOV AX, OFFSET MSG_COMMA
	CALL P_STR
	INC SI
	LOOP LOOP_PRINT_ELE
	RETF
MAIN ENDP

mycs ENDS

END MAIN
